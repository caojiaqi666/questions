// 一只青蛙一次可以跳上1级台阶，也可以跳上2级台阶。求该青蛙跳上一个 n 级的台阶总共有多少种跳法。

// 答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。

// 示例 1：

// 1 2 3
// 输入：n = 2
// 输出：2
// 示例 2：

// 输入：n = 7
// 输出：21
// 示例 3：

// 输入：n = 0
// 输出：1
// 提示：

// 1 1 2 3 5

// n-1个台阶有f(n-1)种跳法，最后还剩一个台阶，最后青蛙只能最后一跳
// n-2个台阶有f(n-2)种跳法，最后剩余二个台阶，有两种跳法：
//        ①一次跳两个台阶
//        ②一次跳一个台阶  但是这种跳法其实已经在n-1个台阶里包含了，所以
//  f(n)=f(n-1)+f(n-2)

/**
 * @param {number} n
 * @return {number}
 */
// var numWays = function (n) {
// 	if (n === 0) return 1;
// 	const dp = new Array(n).fill(1);
// 	for (let i = 1; i < n; i++) {
// 		if (i === 1) {
// 			dp[i] = 2;
// 		} else {
// 			dp[i] = dp[i - 1] + dp[i - 2];
// 		}
// 	}
// 	console.log("dp: ", dp);
// 	return dp[n - 1] % 1000000007;
// };

var numWays = function(n) {
  if (n < 2) return 1
  let p = 1
  let q = 1
  let res = 2

  for(let i = 2; i<n;i++){
      // 每一次多加一步，前面的种类都不会变，因为新加的都是一步走了就行
      // 那么只需要考虑最后一步是2步的情况，那么前面n-2的步数种类我也是知道的
      // 那么n的种类就是fn(n - 2) + fn(n - 1)的种类
      p = q
      q = res
      res = (p + q) % 1000000007
  }
  

  return res
};

console.log(numWays(78));
